#!/usr/bin/env sh
# ^ When bash is invoked like this, it will behave as a POSIX-conformant
# command interpreter. However, this can only be expected to work on numerous
# Linux distributions and not on OS X (#1, #5) or other POSIX or SUS platforms
# (#2, #4).

# Oddly enough, a reference to an unset variable does not cause the shell
# to exit. See the POSIX manpage for `set` (available online at
# https://pubs.opengroup.org/onlinepubs/9699919799.2018edition/utilities/V3_chap02.html#set)
# to learn more.
set -eu

usage() {
    execname=$(basename "$0" .sh)
    if test "$execname" = git-submit50; then
        execname="git{-| }submit50"
    fi
    
    echo "Usage: $execname -h | <slug>"
    echo "  -h      Show this message"
    echo "  <slug>  The CS50 slug to submit to"
    
    exit "$1"
}

# There must be exactly one command line argument...
if test $# -ne 1; then
    usage 2
# ... and it may be the help option.
elif test "$1" = -h; then
    usage
fi
# At this point it is known that there is exactly one command line argument and
# it is not the `-h` option. However, further verification is necessary (#6).
branch=$1

# Checkouts can only be done within a work tree.
git rev-parse --is-inside-work-tree

# This will be the ref used to update the submission contents to the latest
# snapshot.
ref=$(git symbolic-ref --short HEAD)

# submit50 expects to be invoked from within the directory where the files to
# be submitted are, so it is reasonable to simply make the same assumption.
# This is a valid area of improvement, though.
assignment_dir=$PWD

# Switch to the slug branch
# shellcheck disable=SC1083
if git rev-parse --verify --end-of-options "$branch"^{branch}; then
    git checkout "$branch"
else
    git checkout --orphan "$branch"
    cd "$(git rev-parse --show-toplevel)"
    rm -r ./*
fi

git checkout "$ref" -- "$assignment_dir"/*

git commit -m "automated submission by git-submit50"

# submit50 expects user.name to be the student's GitHub account username, which
# is used to determine the name of the remote repository to which the
# submission should be pushed.
# A valid area of improvement.
username=$(git config user.name)
# #7: this is meant to check if the push fails due to an SSH-specific error. A
# potential solution is checking for exit codes defined in sysexits.h.3 (Linux;
# there are probably equivalents on other platforms), but it's not yet verified
# whether those are the same exit codes used by `git push` in case of the error
# in question.
if git push "git@github.com:me50/$username.git" != 0; then
    git push "https://github.com/me50/$username"
fi

git checkout "$ref"